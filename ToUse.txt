#【第 1 步：建立所有本地資料庫】
# 執行此指令會從 TDX 等外部 API 獲取最新的捷運站點、票價、轉乘、出口及設施等資訊，
# 並將這些資料處理後，儲存為專案所需的 .json 檔案，存放在 /data 資料夾中。
# 這是啟動主程式前的「必要前置作業」，通常只需要在初次設定或想更新資料時執行一次。
python build_database.py

#【第 2 步：建立向量搜尋索引】
# 這個指令會讀取上一步建立的站點資料，並使用 AI 模型 (SentenceTransformer)
# 將所有站名（包含別名）轉換為數學向量，再利用 FAISS 建立一個快速搜尋的索引檔 (station_vector.index)。
# 這個索引是讓 AI 能聽懂「北車」、「101」等口語化或錯誤站名的關鍵。
# 此步驟必須在 build_database.py 成功執行後才能運行。
python build_vector_index.py

#【第 3 步：啟動 FastAPI 後端主服務】
# 這是啟動您 AI 聊天機器人後端服務的主要指令。
# - uvicorn: 是一個高速的 ASGI 伺服器，用來運行 FastAPI 應用。
# - app.main:app: 指向 `app` 資料夾中的 `main.py` 檔案裡的 `app` 物件。
# - --reload: 開發模式，當您修改並儲存任何 .py 檔案時，伺服器會自動重啟，方便調試。
# - --host 0.0.0.0: 讓伺服器監聽所有網路介面，這樣在同一個區域網路下的手機或電腦也能連線。
# - --port 8000: 指定服務運行的網路埠號。
# 伺服器啟動後，即可在瀏覽器打開 http://127.0.0.1:8000 與 AI 互動。
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

python build_database.py --name lost_and_found
python build_database.py --name stations